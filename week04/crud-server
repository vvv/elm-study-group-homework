#!/usr/bin/env stack
-- stack --resolver=lts-13.14 script

{-# OPTIONS_GHC -Wall -Werror #-}
{-# LANGUAGE DataKinds #-}
{-# LANGUAGE DeriveGeneric #-}
{-# LANGUAGE TypeOperators #-}
{-# LANGUAGE OverloadedStrings #-}
{-# LANGUAGE RecordWildCards #-}

import           Control.Concurrent.STM.TVar (TVar)
import qualified Control.Concurrent.STM.TVar as TVar
import           Control.Monad (forM)
import           Control.Monad.IO.Class (liftIO)
import qualified Control.Monad.STM as STM
import           Control.Monad.Trans.Reader (ReaderT, ask, runReaderT)
import           Data.Aeson (FromJSON, ToJSON)
import qualified Data.Aeson as J
import           Data.Map (Map)
import qualified Data.Map as Map
import           Data.Proxy (Proxy(..))
import           Data.Text (Text)
import           GHC.Generics (Generic)
import qualified Network.Wai.Handler.Warp as Warp
import           Network.Wai.Middleware.Cors (simpleCors)
import           Servant
  ( Capture
  , Delete
  , Get
  , Handler
  , JSON
  , PlainText
  , Post
  , Put
  , Raw
  , ReqBody
  , (:>)
  , hoistServer
  , serve
  , serveDirectoryFileServer
  )
import           Servant.API.Generic ((:-), ToServantApi, genericApi)
import           Servant.Server.Generic (AsServerT, genericServerT)

jsonOpts :: J.Options
jsonOpts = J.defaultOptions { J.fieldLabelModifier = J.camelTo2 '_' . drop 3 }

data CreateUserForm = CreateUserForm
  { cufName :: Text
  , cufSurname :: Text
  } deriving (Show, Generic)

instance ToJSON CreateUserForm where
    toJSON = J.genericToJSON jsonOpts

instance FromJSON CreateUserForm where
    parseJSON = J.genericParseJSON jsonOpts

data UpdateUserForm = UpdateUserForm
  { uufName :: Text
  , uufSurname :: Text
  } deriving (Show, Generic)

instance ToJSON UpdateUserForm where
    toJSON = J.genericToJSON jsonOpts

instance FromJSON UpdateUserForm where
    parseJSON = J.genericParseJSON jsonOpts

data UserInfo = UserInfo
  { uinId :: Int
  , uinName :: Text
  , uinSurname :: Text
  } deriving (Show, Generic)

instance ToJSON UserInfo where
    toJSON = J.genericToJSON jsonOpts

instance FromJSON UserInfo where
    parseJSON = J.genericParseJSON jsonOpts

data API route = API
  { _ping :: route :- "api" :> "ping" :> Get '[PlainText] Text
  , _listUsers :: route :- "api" :> "users" :> "list.json"
      :> Get '[JSON] [UserInfo]
  , _createUser :: route :- "api" :> "users" :> "create.json"
      :> ReqBody '[JSON] CreateUserForm :> Post '[JSON] UserInfo
  , _updateUser :: route :- "api" :> "users" :> Capture "user-id" UserId
      :> "update.json" :> ReqBody '[JSON] UpdateUserForm
      :> Put '[JSON] UserInfo
  , _deleteUser :: route :- "api" :> "users" :> Capture "user-id" UserId
      :> "delete.json" :> Delete '[JSON] ()
  , _static :: route :- Raw
  } deriving Generic

api :: Proxy (ToServantApi API)
api = genericApi (Proxy :: Proxy API)

type AppM = ReaderT Env Handler

server :: API (AsServerT AppM)
server = API
  { _ping = pure "pong"
  , _listUsers = listUsers
  , _createUser = createUser
  , _updateUser = updateUser
  , _deleteUser = deleteUser
  , _static = serveDirectoryFileServer "."
  }

listUsers :: AppM [UserInfo]
listUsers = do
    env <- ask
    users <- liftIO . TVar.readTVarIO $ envUsers env
    forM (Map.toList users) $ \(userId, User {..}) ->
        pure $ UserInfo userId usrName usrSurname

createUser :: CreateUserForm -> AppM UserInfo
createUser CreateUserForm{..} = do
    env <- ask
    c <- liftIO . STM.atomically $ do
        c <- TVar.readTVar (envCounter env)
        TVar.modifyTVar (envCounter env) (+ 1)
        let user = User {usrName = cufName, usrSurname = cufSurname}
        TVar.modifyTVar (envUsers env) (Map.insert c user)
        pure c
    pure $ UserInfo c cufName cufSurname

updateUser :: UserId -> UpdateUserForm -> AppM UserInfo
updateUser userId UpdateUserForm {..} = do
    env <- ask
    liftIO . STM.atomically $ do
        let user = User {usrName = uufName, usrSurname = uufSurname}
        TVar.modifyTVar (envUsers env) (Map.insert userId user)
    pure $ UserInfo userId uufName uufSurname

deleteUser :: UserId -> AppM ()
deleteUser userId = do
    env <- ask
    liftIO . STM.atomically $ TVar.modifyTVar (envUsers env) (Map.delete userId)

type UserId = Int

data User = User
  { usrName :: Text
  , usrSurname :: Text
  }

data Env = Env
  { envUsers :: TVar (Map UserId User)
  , envCounter :: TVar Int
  }

main :: IO ()
main = do
    putStrLn "Serving at http://localhost:8000"
    putStrLn ""
    putStrLn "Put this script in directory with your HTML, it will be served."
    putStrLn "For example, if your homework is in index.html, you'll see it"
    putStrLn "at http://localhost:8000/index.html"
    entries <- STM.atomically . TVar.newTVar $ Map.fromList []
    counter <- TVar.newTVarIO 1
    let nt :: AppM a -> Handler a
        nt app = runReaderT app (Env entries counter)
        proxy = Proxy :: Proxy (ToServantApi API)
        srv = hoistServer proxy nt (genericServerT server)
    Warp.run 8000 . simpleCors $ serve proxy srv

-- Local variables:
-- mode: haskell
-- End:
